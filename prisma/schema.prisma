// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Vote          Vote[]
  Newsletter    Newsletter[]
  Article       Article[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Newsletter {
  id        String    @id @default(cuid())
  release   Int
  published Boolean
  Article   Article[]
  createdBy User      @relation(fields: [userId], references: [id])
  userId    String
}

model Category {
  id      String    @id @default(cuid())
  name    String    @unique
  Article Article[]
}

model TagsOnPosts {
  id        String  @id @default(cuid())
  article   Article @relation(fields: [articleId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])
  articleId String
  tagId     String
}

model Tag {
  id          String        @id @default(cuid())
  name        String        @unique
  tagsOnPosts TagsOnPosts[]
}

model Vote {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  article   Article @relation(fields: [articleId], references: [id])
  articleId String
}

model Article {
  id           String        @id @default(cuid())
  URL          String        @unique
  title        String
  description  String?
  category     Category      @relation(fields: [categoryId], references: [id])
  release      Newsletter?   @relation(fields: [newsletterId], references: [id])
  newsletterId String?
  categoryId   String
  tagsOnPosts  TagsOnPosts[]
  Vote         Vote[]
  createdBy    User          @relation(fields: [userId], references: [id])
  userId       String
}
